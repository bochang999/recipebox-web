name: Build RecipeBox Android App

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web assets
        run: |
          mkdir -p dist
          cp index.html style.css script.js manifest.json sw.js dist/

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Install Pillow for Icon Resizing
        run: pip install Pillow

      - name: Resize Recipe Icon to Android Densities
        run: python3 use_provided_icon.py

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode Keystore
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        run: |
          if [ ! -z "$KEYSTORE_FILE" ] && [ "$KEYSTORE_FILE" != "ZHVtbXkta2V5c3RvcmUtY29udGVudAo=" ]; then
            echo "Real keystore found, decoding..."
            echo "$KEYSTORE_FILE" | base64 --decode > android/app/keystore.jks
            
            # キーストアファイルの検証
            if keytool -list -keystore android/app/keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" >/dev/null 2>&1; then
              echo "Keystore validation successful"
              echo "KEYSTORE_EXISTS=true" >> $GITHUB_ENV
            else
              echo "Keystore validation failed, will use debug signing"
              echo "KEYSTORE_EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "No valid keystore found, will use debug signing"
            echo "KEYSTORE_EXISTS=false" >> $GITHUB_ENV
          fi
        
      - name: Build Signed Android APK
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          VERSION_CODE: ${{ github.run_number }}
        run: |
          chmod +x gradlew
          if [ "$KEYSTORE_EXISTS" = "true" ]; then
            echo "Building signed release APK with versionCode=${VERSION_CODE}..."
            
            # キーエイリアスの自動検出
            if [ -z "$KEY_ALIAS" ]; then
              echo "Auto-detecting key alias..."
              KEY_ALIAS=$(keytool -list -keystore keystore.jks -storepass "$KEYSTORE_PASSWORD" | grep "Alias name:" | head -n1 | cut -d':' -f2 | xargs)
              echo "Detected key alias: $KEY_ALIAS"
            fi
            
            # KEY_PASSWORDが未設定の場合はKEYSTORE_PASSWORDを使用
            if [ -z "$KEY_PASSWORD" ]; then
              KEY_PASSWORD="$KEYSTORE_PASSWORD"
            fi
            
            ./gradlew assembleRelease \
              -Pandroid.injected.signing.store.file=keystore.jks \
              -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
              -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
              -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
              -Pandroid.injected.version.code="$VERSION_CODE" \
              -Pandroid.injected.version.name="1.$(printf '%02d' $VERSION_CODE)" \
              --no-daemon --stacktrace
          else
            echo "No keystore found, building debug APK with versionCode=${VERSION_CODE}..."
            ./gradlew assembleDebug \
              -Pandroid.injected.version.code="$VERSION_CODE" \
              -Pandroid.injected.version.name="1.$(printf '%02d' $VERSION_CODE)" \
              --no-daemon --stacktrace
          fi

      - name: Rename APK for Release
        run: |
          # 版本号计算: v1.01, v1.02, v1.03 等
          MAJOR_VERSION=1
          MINOR_VERSION=$(printf "%02d" ${{ github.run_number }})
          VERSION="v${MAJOR_VERSION}.${MINOR_VERSION}"
          
          if [ "$KEYSTORE_EXISTS" = "true" ] && [ -f android/app/build/outputs/apk/release/app-release.apk ]; then
            cp android/app/build/outputs/apk/release/app-release.apk "RecipeBox-${VERSION}.apk"
            echo "APK_FILE=RecipeBox-${VERSION}.apk" >> $GITHUB_ENV
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          else
            cp android/app/build/outputs/apk/debug/app-debug.apk "RecipeBox-${VERSION}.apk"
            echo "APK_FILE=RecipeBox-${VERSION}.apk" >> $GITHUB_ENV
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE }}
          path: ${{ env.APK_FILE }}

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: RecipeBox ${{ env.VERSION }}
          files: ${{ env.APK_FILE }}
          body: |
            🍳 **RecipeBox ${{ env.VERSION }} - Your Cooking Companion**
            
            **New in this version:**
            - 🎨 Beautiful new recipe book icon
            - 🔐 Consistent APK signing (no more uninstall required!)
            - 📱 Enhanced mobile interface
            
            **Features:**
            - 📖 Comprehensive Recipe Collection (50+ recipes)
            - 🧮 Salt Concentration Calculator  
            - ⚖️ Container Weight Database
            - 📱 Mobile-Optimized Interface
            - 🔄 Ingredient Scaling (1-4 servings)
            - 🎯 One-tap recipe access
            
            **Installation:**
            1. Download the APK file below
            2. Enable "Install from Unknown Sources" in Android settings  
            3. Install the APK (updates work seamlessly!)
            
            **Version Info:**
            - Version: ${{ env.VERSION }}
            - Build: ${{ github.sha }}
            - Release APK with consistent signing
            
            **APK Download:**
            - `${{ env.APK_FILE }}`: Main application with beautiful custom icon
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}